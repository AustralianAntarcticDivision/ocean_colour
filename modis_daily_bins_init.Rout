
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> library(raadtools)
Loading required package: raster
Loading required package: sp
> library(roc)
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:raster’:

    intersect, select, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(tibble)
> library(dplyr)
> ## data frame of all L3 RRS files for MODISA
> files <- ocfiles(time.resolution = "daily", product = "MODISA", varname = "RRS", type = "L3b", bz2.rm = TRUE, ext = "nc") %>%
+   as_tibble() %>% transmute(date, file = basename(fullname), fullname)
> 
> #daterange <- as.POSIXct(c("2015-07-01", "2016-07-01"), tz = "GMT")
> lonrange <- c(-180, 180)
> latrange <- c(-78, -30)
> #' Read Level-3 ocean colour.
> #'
> #' Read the compound types (a.k.a. "tables") from ocean colour L3 NetCDF files.
> #'
> #' `read_binlist` for just the 'BinList'
> #' `read_compound` for just the compound data
> #' `read_L3_file` for everything at once
> #' @param file
> #'
> #' @return
> #' @export
> #' @name read_L3_file
> #' @examples
> read_binlist <- function(file) {
+   tibble::as_tibble(rhdf5::h5read(file, name = file.path("/level-3_binned_data", "BinList")))
+ }
> #' @export
> #' @name read_L3_file
> read_compound <- function(file, compound_vars = NULL) {
+   info <- rhdf5::h5ls(file)
+   tab <- table(info$dim); wm <- which.max(tab); test <- names(tab[wm])
+   ## get all vars, or just the ones the users wants
+   if (is.null(compound_vars))  {
+     compound <- setdiff(info$name[info$dim == test], "BinList")
+   } else {
+     compound <- compound_vars
+   }
+   compoundpath <- file.path("/level-3_binned_data", compound)
+   l <- lapply(compoundpath, function(aname) tibble::as_tibble(rhdf5::h5read(file, name = aname)))
+   dplyr::bind_cols(lapply(seq_along(compound), function(i) setNames(l[[i]], sprintf("%s_%s", compound[i], names(l[[i]])))))
+ }
> library(roc)
> ## initialize the bin logic for MODISA
> init <- initbin(NUMROWS = 4320)
> latbin_idx <- which(between(init$latbin, latrange[1], latrange[2]))
> bins <- tibble(bin_num = seq(init$basebin[min(latbin_idx)], init$basebin[max(latbin_idx)+1]))
> xy <- bin2lonlat(bins$bin_num, 4320)
> bins <- bins %>% filter(between(xy$x, lonrange[1], lonrange[2])) %>%
+   mutate(bin_idx = row_number())
> rm(xy)
> 
> 
> get_l3 <- function(file_package) {
+   file <- file_package$file
+   datei <- file_package$datei
+   yr <- format(datei, "%Y")
+   
+   fname <- file.path(getOption("default.datadir"), "data_local/acecrc.org.au/ocean_colour/modis_daily", yr, sprintf("%s", format(datei, "modis_%Y%j.rds")))
+   if (file.exists(fname)) return(NULL)
+   bins <- file_package$bins
+   binlist <- try(read_binlist(file), silent = TRUE)
+   if (inherits(binlist, "try-error")) return(file)
+   bins_present <- inner_join(bins, binlist, "bin_num")
+   if (nrow(bins_present) < 1) return(NULL)
+   d1 <-   bind_cols(binlist, read_compound(file,
+                                            compound_vars = c("Rrs_443", "Rrs_488", "Rrs_555", "Rrs_547"))) %>%
+     inner_join(bins, "bin_num")  %>% mutate(chla_johnson = chla(., sensor = "MODISA", algo = "johnson")) %>%
+     mutate(chla_nasa = chla(., sensor = "MODISA", algo = "oceancolor")) %>%
+     dplyr::select(bin_num, chla_johnson, chla_nasa) %>%
+     filter(!is.na(chla_johnson), chla_johnson > 0)  %>%
+     mutate(date = datei)
+  
+   saveRDS(d1, fname, compress = FALSE)
+ }
> 
> pkgs <- lapply(seq(nrow(files)), function(x) list(file = files$fullname[x], datei = files$date[x], bins = bins))
> library(future)

Attaching package: ‘future’

The following object is masked from ‘package:raster’:

    values

> plan(multiprocess)
> 
> print(Sys.time())
[1] "2017-05-21 00:36:26 AEST"
> aa <- future_lapply(pkgs, get_l3)
> print(Sys.time())
[1] "2017-05-21 01:44:05 AEST"
> 
> 
> 
> 
> proc.time()
     user    system   elapsed 
11965.644  1092.100  4768.545 
Terminated
